import math

#Ejercicio pag 55

'''a = 4
b = -6
c = 2

x1 = ((-b) + ((b) ** 2 - (4 * a * c)) ** 0.5) / (2 * a)
x2 = ((-b) - ((b) ** 2 - (4 * a * c)) ** 0.5) / (2 * a)'''


'''#Ejercicio pag 59 (no salio)
a = (40500 - x) * (180 - x)
x = 90
sen = math.sin(((4 * x) * (180 - x)) / ((40500 - x) * (180 - x)))'''



'''#Errores de aproximacion pag 60
x = (19 / 155) * (155 / 19)
print(round(x))'''

#*************************Ejercicios de repaso pag 63*************************

'''1-Escriba un programa en Python que acepte el radio de un circulo y
compute su area.
r = 5
area_circulo = (math.pi * (r ** 2))'''

'''2-Escriba un programa en Python que acepte el radio de una esfera y
compute su volumen.
r_2 = 5
volumen_circulo = (4 * math.pi * r_2 ** 3) / 3'''

'''Escriba un programa en Python que compute el futuro valor de una cantidad
de dinero, a partir del capital inicial, el tipo de interes y el numero de
años.
capital = 10_000
interes = 0.035
años = 7

cap_futuro = ((capital) * ((1 + interes) ** años))'''

'''Escriba un programa en Python que calcule la distancia euclidea entre dos
puntos (x1,y1) y (x2,y2).
x2 = -7
x1 = 3
y2 = -4
y1 = 5

euc = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5'''

''''Escriba un programa en Python que lea por teclado dos numeros enteros y
muestre por pantalla el resultado de realizar las operaciones basicas
dato_1 = int(input('Introduza el numero "7" para operarlo: '))
dato_2 = int(input('Introduza el numero "4" para operarlo: '))
suma = dato_1 + dato_2
resta = dato_1 - dato_2
producto = dato_1 * dato_2
cociente = dato_1 / dato_2

print(f'Suma: {suma}\nResta: {resta}\nProducto: {producto}\nCociente: {cociente}')'''


'''Dada la siguiente letra, obtenga la misma pero sustituyendo la palabra voices
por sounds'''

song = '''You look so beautiful in this light
Your silhouette over me
The way it brings out the blue in your eyes
Is the Tenerife sea. and all of the voices surrounding us here
They just fade out when you take a breath
Just say the word and I will disappear
Into the wilderness

song.count('voices')

#1
song.find('voices')
#155'''

'''#Remplaza voices por sounds troceando la cadena y agregando la palabra deseada.
print(f'... {song[:154]} sounds {song[162:]}')

#Remplaza voices por sounds con la funcion replace().
print(song.replace('voices', 'sounds'))'''

'''#Mayusculas y minusculas
print(song.capitalize())  #Primer letra mayuscula
print(song.upper())       #Todo mayuscula'''


'''Dada la variable: e = 2.71828 obtenga los siguientes resultados utilizando
<<f-strings>>
#'2.718'
#'2.718280'
#'    2.72'  (cuatro espacios en blanco)
#'2.718280e+00'
#'00002.7183'
#'            2.71828'   (12 espacios en blanco)
e = 2.71828

print(f'{e:.3f}')
print(f'{e:.6f}')
print(f'{e:8.2f}')
print(f'{e:e}')
print(f'{e:010.4f}')
print(f'{e:19.5f}')'''


'''***********************Ejercicios de repaso pag86**************************

#1. Escriba un programa en Python que acepte el nombre y los apellidos de una
persona y los imprima en orden inverso separados por una coma. Utilice f-strings
para implementarlo
nombre = input('Digite el primer nombre: ')
primer_apellido = input('Digite el primer apellido: ')
segundo_apellido = input('Digite el segundo apellido: ')

print(f'{primer_apellido} {segundo_apellido}, {nombre}')'''

'''2. Escriba un programa en Python que acepte una ruta remota de recurso samba, y lo
separe en nombre(IP) del equipo y ruta
ruta = '//192.168.3.141/-Upepe'

print(f'Equipo(IP): {ruta[:15]} Ruta: {ruta[17:]}')'''


'''5. Escriba un programa en Python que acepte una palabra en castellano y calcule una
métrica que sea el número total de caracteres de la palabra multiplicado por el número
total de vocales que contiene la palabra
palabra = input('Introduce una palabra : ')
num_caracteres = len(palabra)
vocales_a = palabra.count('a')
vocales_e = palabra.count('e')
vocales_i = palabra.count('i')
vocales_o = palabra.count('o')
vocales_u = palabra.count('u')
total_vocales = (vocales_a + vocales_e + vocales_i + vocales_o + vocales_u)
metrica = (total_vocales * num_caracteres)
print(metrica)'''


'''Dada una variable year con un valor entero, compruebe si dicho año es
bisiesto o no lo es.
year = input('Digite un año: ')

year_entero = int(year)'''

'''if (year_entero % 4 == 0 and year_entero % 100 != 0 and year_entero % 400 != 0):
    print('Es año bisiesto')
elif year_entero % 4 == 0 and year_entero % 100 == 0 and year_entero % 400 != 0:
    print('No es año bisiesto')
elif year_entero % 4 == 0 and year_entero % 100 == 0 and year_entero % 400 == 0:
    print('Es año bisiesto')
elif year_entero % 4 != 0 and year_entero % 100 != 0 and year_entero % 400 != 0:
    print('No es año bisiesto')
if year_entero % 400 == 0 or (year_entero % 4 == 0 and year_entero % 100 != 0):
    print('Es año bisiesto')
else:
    print('No es año bisiesto')'''



'''***************************Ejercicio pag 97***********************************
Escriba un programa que permita adivinar un personaje de Marvel en base a las tres
preguntas siguientes:
1. ¿Puede volar?
2. ¿Es humano?
3. ¿Tiene máscara?


fly = input('¿Tu personaje puede volar? Contesta "si" o "no" ')
if fly == ('si') and fly != ('no'):
    fly = bool(True)
else:
    fly = bool(False)

human = input('¿Tu personaje es humano? Contesta "si" o "no" ')
if human == ('si') and human != ('no'):
    human = bool(True)
else:
    human = bool(False)

mask = input('¿Tu personaje usa máscara? Contésta "si" o "no" ')
if mask == ('si') and mask != ('no'):
    mask = bool(True)
else:
    mask = bool(False)
    
if fly and human and mask:
    print('Tu personaje es "Iron Man"')
if fly and human and not mask:
    print('Tu personaje es "Capitana Marvel"')
if fly and not human and mask:
    print('Tu personaje es "Ronan Accuser"')
if fly and not human and not mask:
    print('Tu persoinaje es "Vision"')
if not fly and human and mask:
    print('Tu personaje es "Spider Man"')
if not fly and human and not mask:
    print('Tu personaje es "Hulk"')
if not fly and not human and mask:
    print('Tu personaje es "Black Bolt"')
if not fly and not human and not mask:
    print('Tu personaje es "Thanos"')'''
    
    

'''***************************Ejercicio pag 101***********************************
Escriba un programa en Python que pida (por separado) dos valores numéricos y un
operando (suma, resta, multiplicación, división) y calcule el resultado de la
operación, usando para ello la sentencia match-case.
Controlar que la operación no sea una de las cuatro predefinidas. En este caso dar un mensaje
de error y no mostrar resultado final.    
    
num_1 = float(input('Introduzca el primer valor a operar: '))

num_2 = float(input('Introduzca el segundo valor a operar: '))



op = input('Introduzca el operador ("+", "-", "x", "/"): ')

match op:
    case '+':
        suma = num_1 + num_2
        print(f'{num_1} + {num_2} = {suma}')
    case '-':
        resta = num_1 - num_2
        print(f'{num_1} - {num_2} = {resta}')
    case 'x':
        producto = num_1 * num_2
        print(f'{num_1} * {num_2} = {producto}')
    case '/':
        cociente = num_1 / num_2
        print(f'{num_1} / {num_2} = {cociente}') '''

'''*********************Ejercicios repaso pag 110*******************************'''
    
'''1. Escriba un programa en Python que acepte la opción de dos jugadoras en
Piedra-Papel-Tijera y decida el resultado (solución).

res_1 = input('Jugador 1, introduzca piedra, papel o tijera: ')
res_2 = input('Jugador 2, introduzca piedra, papel o tijera: ') 

if res_1 == 'papel' and res_2 == 'tijera':
              print('Gana jugador 2: Tijera corta papel')   
if res_1 == 'papel' and res_2 == 'piedra':
              print('Gana jugador 1: Papel envuelve piedra')            
if res_1 == 'piedra' and res_2 == 'tijera':
        print('Gana jugador 1: Piedra rompe tijera')                   
if res_2 == 'papel' and res_1 == 'tijera':
        print('Gana jugador 1: Tijera corta papel')    
if res_2 == 'papel' and res_1 == 'piedra':
        print('Gana jugador 2: Papel envuelve piedra')        
if res_2 == 'piedra' and res_1 == 'tijera':
        print('Gana jugador 2: Piedra rompe tijera')        
if res_1 == 'piedra' and res_2 == 'piedra':
        print('Empate')
if res_1 == 'papel' and res_2 == 'papel':
        print('Empate')
if res_1 == 'tijera' and res_2 == 'tijera':
        print('Empate')  '''

    
'''2.Escriba un programa en Python que acepte 3 números y calcule el
mínimo

nums = [a, b, c] = input('Ingresa tres numeros diferentes: ')
#nums = int()

if nums[0] == nums[1] and nums[0] == nums[2]:
    print('Hay dos o mas numeros iguales.')
elif nums[0] < nums[1] and nums[0] < nums[2]:
    print(f'{nums[0]} es el menor de los tres numeros.')
elif nums[1] < nums[2]:
    print(f'{nums[1]} es el menor de los tres numeros.')
else:
    print(f'{nums[2]} es el menor de los tres numeros.')'''

'''3. Escriba un programa en Python que acepte un país (como «string») y
muestre por pantalla su bandera (como «emoji»). Puede restringirlo a un
conjunto limitado de países  

alemania_code = 0x1F680
alemania = chr(alemania_code)

china_code = 0x1F6A9
china = chr(china_code)

japon_code = 0x1F1F5
japon = chr(japon_code)

francia_code = 0x1F1EB
francia = chr(francia_code)

korea_code = 0x1F1F0
korea = chr(korea_code)

españa_code = 0x1F1EA
españa = chr(españa_code)

italia_code = 0x1F1EE
italia = chr(italia_code)

rusia_code = 0x1F1F7
rusia = chr(rusia_code)

country = input('Introduce un pais para ver el emoji de su bandera: ')

if country == 'alemania':
    print(alemania)
elif country == 'china':
    print(china)
elif country == 'japon':
    print(japon)
elif country == 'francia':
    print(francia)
elif country == 'korea':
    print(korea)
elif country == 'españa':
    print(españa)
elif country == 'italia':
    print(italia)
elif country == 'rusia':
    print(rusia)
else:
    print('Intentalo de nuevo')'''


'''5. Escriba un programa en Python que acepte edad, peso, pulso y
plaquetas, y determine si una persona cumple con estos requisitos para
donar sangre

#Entrada: edad=34; peso=81; heartbeat=70; plaquetas=150000
#Salida: Apto para donar sangre
        
edad = int(input('Digte su edad: '))
peso = float(input('Digite su peso: '))
heartbeat = int(input('Digite su heartbeat: '))
plaquetas = int(input('Digite sus plaquetas: '))


if 18 <= edad <= 65 and peso >= 50 and 50 <= heartbeat <= 110 and plaquetas >= 150:                     #cumple
    print(f'\nEdad: {edad}, dentro del rango\nPeso: {peso}, dentro del rango\nHeartBeat:\
 {heartbeat}, dentro del rango\nPlaquetas: {plaquetas},\
 dentro del rango.\n\nAPTO PARA DONAR SANGRE')
elif edad < 18 or 65 < edad and peso < 50 and heartbeat < 50 or 110 < heartbeat and 150 > plaquetas:    #no cumple nada
    print(f'\nEdad: {edad}, fuera del rango\nPeso: {peso}, fuera del rango\nHeartBeat:\
 {heartbeat}, fuera del rango\nPlaquetas: {plaquetas},\
 fuera del rango.\n\n')
elif edad < 18 or 65 < edad and peso >= 50 and 50 <= heartbeat <= 110 and plaquetas >= 150:             #no cumple edad
    print('No cumple con el rango de edad\n"NO" APTO PARA DONAR SANGRE')
elif edad < 18 or 65 < edad and peso < 50 and 50 <= heartbeat <= 110 and plaquetas >= 150:              #no cumple edad ni peso
    print('No cumple el rango de edad ni el peso\n"NO" APTO PARA DONAR SANGRE')
elif edad < 18 or 65 < edad and peso < 50 and heartbeat < 50 or 110 < heartbeat and plaquetas >= 150:   #no cumple edad, peso ni heartbeat
    print('No cumple el rango de edad,\nNo cumple con el peso ni esta dentro del HeartBeat requerido\
 \n"NO" APTO PARA DONAR SANGRE')
elif 18 <= edad <= 65 and peso < 50 and heartbeat < 50 or 110 < heartbeat and plaquetas >= 150:         #no cumple peso ni heartbeat 
    print('No cumple el peso ni el HeartBeat\n"NO" APTO PARA DONAR SANGRE')
elif 18 <= edad <= 65 and peso < 50 and heartbeat < 50 or 110 < heartbeat and 150 > plaquetas:          #no cumpple peso, heartbeat ni plaquetas
    print('No cumple con el peso, no esta dentro del HeartBeat,\n fuera de rango de plaquetas\n\
 "NO" APTO PARA DONAR SANGRE')    
elif 18 <= edad <= 65 and peso < 50 and 50 <= heartbeat <= 110 and plaquetas >= 150:                    #no cumple el peso
    print('No cumple con el peso requerido\n"NO" APTO PARA DONAR SANGRE')
elif 18 <= edad <= 65 and peso >= 50 and heartbeat < 50 or 110 < heartbeat and 150 > plaquetas:         #no cumple heartbeat ni plaquetas 
    print('No cumple con el HeartBeat ni plaquetas\n"NO" APTO PARA DONAR SANGRE')     
elif 18 <= edad <= 65 and peso >= 50 and heartbeat < 50 or 110 < heartbeat and plaquetas >= 150:        #no cumple heratbeat
    print('No cumple con el heartbeat requerido\n"NO" APTO PARA DONAR SANGRE')
elif 18 <= edad <= 65 and peso >= 50 and 50 <= heartbeat <= 110 and 150 > plaquetas:                    #no cumple plaquetas
    print('No cumple con las plaquetas requeridas\n"NO" APTO PARA DONAR SANGRE')'''


'''Escriba un programa que calcule la distancia hamming entre dos cadenas de texto de la
misma longitud.

cadena_1 = '0001010011101'
cadena_2 = '0000110010001'
           #0001100001100
while cadena_1[0] != cadena_1[12] and cadena_2[0] != cadena_2[12]:
    cadena_1 += [1] 
    print('hola')'''

#Dada una cadena de texto, indique el número de vocales que tiene.

'''yes = input('Introduzca una palabra: ')
a = 0 
b = 0
for i in yes:
    b += 1
    if i == 'a':
        a += 1
    elif i == 'e':
        a += 1
    elif i == 'i':
        a += 1
    elif i == 'o':
        a += 1
    elif i == 'u':
        a += 1    
    if  b == len(yes):
        print(f'La palabra contiene {a} vocales. ')'''



'''#Determine si un número dado es un número primo.

numero  = input('Introduce un numero entero positivo')
numero = int(numero)

i = 2

while i < numero:


    if numero % i == 0:
        print(f'{numero} no es numero primo')
    else:

        print(f'{numero} es un numero primo')
    break
i += 1 

#Sucecion de fibonachi
a = 1
b = 1

print('1\n1')

for i in range(15):
    total = a + b
    b=a
    a= total
    print(total)'''


#EJERCICIO PAG 117. Escriba un programa en Python que realice las siguientes 9 multiplicaciones. 1*1, 11*11... 111111111*111111111

'''a = 0

for i in range(9):
    a += 1
    match a:
        case 1:
            print(f'1 * 1 = {1 * 1}')
        case 2:
            print(f'11 * 11 = {11 * 11}')
        case 3:
            print(f'111 * 111 = {111 * 111}')
        case 4:
            print(f'1111 * 1111 = {1111 * 1111}')
        case 5:
            print(f'11111 * 11111 = {11111 * 11111}')
        case 6:
            print(f'111111 * 111111 = {111111 * 111111}')
        case 7:
            print(f'1111111 * 1111111 = {1111111 * 1111111}')
        case 8:
            print(f'11111111 * 11111111 = {11111111 * 11111111}')
        case 9:
            print(f'111111111 * 111111111 = {111111111 * 111111111}')'''

#Escriba un programa en Python que acepte una cadena de texto e indique si todos sus caracteres son alfabeticos.

'''dato = str(input('Digite una cadena de texto: '))

if (dato.isalpha()) == True:
    print('Cadena alfabetica')

else:
    print('Se han encontrado caracteres no alfabeticos')'''


#Escriba un programa en Python que acepte dos cadenas de texto y compute el producto cartesiano letra a letra entre ellas.

'''cadena1 = (input('Digite la primer cadena de texto: '))
cadena2 = (input('Digite la segunda cadena de texto: '))

lon_cadena1 = len(cadena1)
lon_cadena2 = len(cadena2)

for i in range(lon_cadena1):
    for j in range(lon_cadena2):
        print(cadena1[i] + cadena2[j])'''


# Escriba un programa en Python que acepte dos valores enteros (𝑥 e 𝑦) que representarán un punto (objetivo) en el plano. El programa
# simulará el movimiento de un «caballo» de ajedrez moviéndose de forma alterna: 2 posiciones en 𝑥 + 1 posición en 𝑦. El siguiente movimiento
# que toque sería para moverse 1 posición en 𝑥 + 2 posiciones en 𝑦. El programa deberá ir mostrando los puntos por los que va pasando el «caballo»
# hasta llegar al punto objetivo.

'''x = int(input('-Digite un numero entero positivo no mayor a 8: '))
y = int(input('-Digite un numero entero positivo no mayor a 8: '))

px = 0
py = 0
print(f'({px},{py})')

if px < x:
        px += 2
        py += 1
print(f'({px},{py})')



for i in range(x):
    if px < x:
        if px != py and px > py:
            py += 2
            px += 1
        print(f'({px},{py})')

        if px == py:
            px += 2
            py += 1
        print(f'({px},{py})')   '''


# Determine si una cadena de texto dada es un isograma, es decir, no se repite ninguna letra.


'''iso = input('Escriba una cadena de caracteres y se determinara si se trata de un isograma: ')
a = 0

for i in iso:
    if a == 1:
        break
    
    if (iso.count(i) > 1):
        print(f'{iso} no es un isograma')
        break
    else:
        for j in iso:
            if (iso.count(j) > 0 and iso.count(j) < 2):
                a += 1
                print(f'{iso} es un isograma')
                break'''


#(EJERCICIO PAG 133) Consiga la siguiente transformación: -> 12/31/20 31-12-2020
'''cadena = '12/31/20'

lista = cadena.split('/')  #------------------------Convertimos el string en list
lista[0] = '31'
lista[1] = '12'            
lista[2] = '2020'          #------------------------Modificamos la lista
new_cadena = '-'.join(lista)    #-------------------Covertimos la lista en string
print(new_cadena)'''


# Dados dos vectores (listas) de la misma dimensión, utilice la función zip() para calcular suproducto escalar.


'''vec_1 = []
vec_2 = []

conta_escalar = ['primer', 'segundo', 'tercer', 'cuarto', 'quinto']

for i in conta_escalar:
    vec1 = int(input(f'Digite el {i} escalar del vector #1: '))
    vec_1.append(vec1)
    vec2 = int(input(f'Digite el {i} escalar del vector #2: '))
    vec_2.append(vec2)
    
escalar = 0
producto = 0

for j, k in zip(vec_1, vec_2):
    producto = (j * k)
    result = escalar + producto
    escalar = result
print(f'El producto punto tiene un valor de: {result}')'''


# Utilizando listas por comprensión, cree una lista que contenga el resultado de aplicar la

#función 𝑓(𝑥) = 3𝑥 + 2 para 𝑥 ∈ [0, 20).

'''funcion = [3*(rango)+2 for rango in range(20)]
print(funcion)'''


#Escriba un programa que permita multiplicar únicamente matrices de 2 filas por 2 columnas.

#Veamos un ejemplo concreto:
    
'''A = [[], []]
B = [[], []]
elemento = ['primer', 'segundo']
elemento2 = ['tercer', 'cuarto']

for i in elemento:
    vec = int(input(f'Digite el {i} elemento del vector A: '))       
    A[0].append(vec)

for j in elemento2:
    vec2 = int(input(f'Digite el {j} elemento del vector A: '))
    A[1].append(vec2)


for i in elemento:
    vec = int(input(f'Digite el {i} elemento del vector B: '))       
    B[0].append(vec)

for j in elemento2:
    vec2 = int(input(f'Digite el {j} elemento del vector B: '))
    B[1].append(vec2)
    
print(A)
print(B)
c0 = A[0][0] * B[0][0] + A[0][1] * B[1][0]
c1 = A[0][0] * B[0][1] + A[0][1] * B[1][1]
c2 = A[1][0] * B[0][0] + A[1][1] * B[1][0]
c3 = A[1][0] * B[0][1] + A[1][1] * B[1][1]

C = [[c0, c1], [c2, c3]]
print(C)'''


#Escriba un programa en Python que acepte una lista de valores numéricos y obtenga

#su valor máximo sin utilizar la función «built-in» max() .


#Escriba un programa en Python que acepte una lista y elimine sus elementos duplicados.

'''# Llenamos la lista mediante un bucle for, paramos el bucle con la palabra "fin"
lista_duplicada = []
vec = 0
for i in range(1, 15):
    if vec == 'fin':
        break
    vec = str(input(f'Ingrese el elemento no. {i} de la lista, procure repetir alguno de ellos (Digite \"fin\" para indicar el final de su lista).'))
    lista_duplicada.append(vec)
print(lista_duplicada)
                  
for i in range(len(lista_duplicada) - 1):
    if i == len(lista_duplicada) - 1:
                break
    menor = i
    for j in range((i + 1), len(lista_duplicada)):
        if lista_duplicada[j] == lista_duplicada[menor]:
            menor = j
        if menor != i:
            lista_duplicada.pop(j)
            print(lista_duplicada)'''
            

 #Escriba un programa en Python que acepte una lista – que puede contener sublistas(sólo en 1 nivel de anidamiento) – y genere otra lista «aplanada»   

'''sublista1 = []
sublista2 = []
sublista3 = []
lista = []
vec = 0


for j in range(1, 15):
    sublista = input('A continuacion llenara una lista de sublistas, si \
desea escribir en alguna de las 3 sublistas escriba \"sub1\", \"sub2\" \
o bien \"sub3\", si desea escribir en la lista pricipal escriba \"main\".\
\n')
    if sublista == 'sub1':
        for i in range(1, 15):
            vec = (input(f'Ingrese el elemento no. {i} de la sublista #1 \
(Digite \"fin\" para indicar el final de la sublista y salir a la lista \
principal).\n'))
            if vec == 'fin':
                break
            else:    
                sublista1.append(vec)
                if sublista1[0] == vec:
                    lista.append(sublista1)
                print(lista)
                         
    elif sublista == 'sub2':
        for i in range(1, 15):
           vec = (input(f'Ingrese el elemento no. {i} de la sublista #2\
(Digite \"fin\" para indicar el final de la sublista y salir a la lista \
principal).\n'))
           if vec == 'fin':
               break
           else:
               sublista2.append(vec)
               if sublista2[0] == vec:
                    lista.append(sublista2)
               print(lista)

    elif sublista == 'sub3':
        for i in range(1, 15):
           vec = (input(f'Ingrese el elemento no. {i} de la sublista #3\
(Digite \"fin\" para indicar el final de la sublista y salir a la lista \
principal).\n'))

           if vec == 'fin':
               break
           else:
               sublista3.append(vec)  
               if sublista3[0] == vec:
                    lista.append(sublista3)
               print(lista)

    elif sublista == 'main':
        for i in range(1, 15):
           vec = (input(f'Ingrese el elemento no. {i} de la lista. \
(Digite \"fin\" para regresar al menu principal).\n'))

           if vec == 'fin':
               break
           else:
               lista.append(vec)
               print(lista)
               FALTA APLANAR
               '''           

#EJERCICIO Pag 156

'''#Cree un diccionario con los nombres de 5 personas de su familia y sus edades.

familyMembers = {'Leonor': '46 años',
                 'Briggite': '25 años',
                 'Jose': '45 años',
                 'Diego': '15 años',
                 'Alex': '22 años'}
print(familyMembers)'''


# Construya un diccionario partiendo de una cadena de texto con el siguiente formato:

#<city>:<population>;<city>:<population>;<city>:<population>;....
#• Claves: ciudades.
#• Valores: habitantes (como enteros).

'''citiesPop = dict(mexicoCity = 40_000_000, vaoncouverCity = 60_000_000,\
             washingtonCity = 10_000_000)
print(citiesPop)'''

#Tuplas Desempaquetado
'''three_wise_men = ('Melchor', 'Gaspar', 'Baltazar')
wiseMen_1, wiseMen_2, wiseMen_3 = three_wise_men

reverseTuple = three_wise_men[:1]'''

#Tuplas desempaquetado con divmod()
'''first = (100)
second = (25)
suma = first + second
primero, segundo = divmod(first, second)'''


#Diccionario a partir de una tupla de listas
'''tupla = (['a', 1],['b', 2])
diccioanrio = dict(tupla)'''

#Creando diccionario
'''nombres = dict(Carlos = 'Civil', Colal = 'Admin', Alex = 'Inge')'''

#Diccionario a partir un valor de relleno(tupla)
'''nombres = ('Carlos', 'Alex', 'Colal')
asignar_valor_bobos = dict.fromkeys(nombres, 'bobo')'''

#Obtener elemento de diccionario
'''dick = {'Pala':'Aquel de prominente miembro viril',
        'Carlos':'Super Albañil',
        'Colal':'Fauna marina',
        'Toñity':'Pendejo'}
print(dick['Pala'])'''

#Agregar y modificar elementos al diccionario
'''dick = {'Pala':'Aquel de prominente miembro viril',
        'Carlos':'Super Albañil',
        'Colal':'Fauna marina',
        'Toñity':'Pendejo'}
dick['Carlos'] = 'Buen hombre'
dick['Javi'] = 'Inge fit'''

#Llenado de diccioanrio desde vacio (for)
'''numeros = ['Uno', 'Dos', 'Tres', 'Cuatro', 'Cinco']
Dic = {}

for i, numero in enumerate(numeros):
    Dic[numero] = i + 1 '''

#EJERCICIO PAG 162 Usando un diccionario, cuente el número de veces que se repite\
#cada letra en una cadena de texto dada.

given_string = str(input('Escriba una palabra y se determiara el numero de veces que se repite cada letra'))
repeated_lettersDic = {}

for i in given_string:
    
    first_stringCount = given_string.count(i)
    for j in range(given_string):
        repeated_lettersDic[j] = first_stringCount
